{"version":3,"file":"main.js","mappings":";;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,mBAAO,CAAC,2CAAe;;AAE3C;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,wBAAwB,UAAU;AAClC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,wBAAwB,kBAAkB;AAC1C;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;ACpHA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,4BAA4B,UAAU;AACtC;AACA;AACA;AACA;;AAEA;AACA;AACA,wBAAwB,kBAAkB;AAC1C;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;;;;;;UCtEA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;;;;;ACtBA;AACA,oBAAoB,mBAAO,CAAC,2CAAe;AAC3C,kBAAkB,mBAAO,CAAC,uCAAa","sources":["webpack://battle-ship/./src/Gameboard.js","webpack://battle-ship/./src/shipFactory.js","webpack://battle-ship/webpack/bootstrap","webpack://battle-ship/./src/index.js"],"sourcesContent":["/* eslint-disable default-case */\n/* eslint-disable no-case-declarations */\n/* eslint-disable no-unused-expressions */\n/* eslint-disable operator-linebreak */\n/* eslint-disable no-trailing-spaces */\n/* eslint-disable no-console */\nconst shipFactory = require('./shipFactory');\n\n// contains all required info about the board the game exists in\nconst board = {\n    size: {\n        columns: 0,\n        rows: 0,\n    },\n    grid: [],\n};\n/* eslint-disable no-unused-vars */\nconst Gameboard = () => {\n    // creates a shipFactory once here so it isn't done repeatedly throughout \n    // this factory function\n    const players = shipFactory();\n\n    // creates the game grid itself\n    function gridCreate(x) {\n        const grid = x * x;\n        for (let i = 0; i < grid; i += 1) {\n            board.grid\n                .push(i + 1);\n        }\n        return board.grid;\n    }\n\n    // allows the grid to adjust according to the number given\n    function gridSize(x) {\n        board.size.columns = x;\n        board.size.rows = x;\n        gridCreate(x);\n        return board;\n    }\n\n    // records which ship was hit where\n    function hit(ship, position) {\n        return players.isHit(ship, position);\n    }\n\n    // allows the user and computer to take a shot\n    function takeAim(position) {\n        const ship = board.grid[position];\n        return typeof board.grid[position] === 'number' ? \n            'miss :(' :\n            hit(ship, position);\n    }\n\n    // creates a ship and places it on the board\n    function createShip(start, end, axis) {\n        const ship = players.determineAxis(start, end, axis);\n        for (let i = 0; i <= end - start; i += 1) {\n            board.grid\n                .splice(start + i, 1, ship);\n        }\n        return ship;\n    }\n\n    // parses info given that will then be used to create a ship\n    function stageShipsForCreation(length, position, axis) {\n        const start = position;\n        const end = position + length - 1;\n        switch (true) {\n        case axis === 'x':\n            return createShip(start, end, axis);\n        case axis === 'y':\n            return createShip(start, end, axis);\n        }\n    }\n\n    // grabs the status of each ship on the board\n    function countShips() {\n        board.grid.forEach((x) => {\n            x.status === 'afloat' ? \n                x :\n                x;\n        });\n        console.log();\n        console.log(board.grid);\n    }\n\n    return {\n        gridSize, stageShipsForCreation, hit, takeAim, countShips,\n    };\n};\n\nconst boardCreation = Gameboard();\nboardCreation.gridSize(10);\n\nconst playerSmall = Gameboard();\nconst playerSmall2 = Gameboard();\nconst playerSmall3 = Gameboard();\nconst playerMed = Gameboard();\nconst playerLarge = Gameboard();\nconst playerXLarge = Gameboard();\n\nconsole.log(playerSmall.stageShipsForCreation(1, 3, 'x'));\nplayerSmall2.stageShipsForCreation(1, 70, 'x');\nplayerSmall3.stageShipsForCreation(1, 5, 'x');\nplayerMed.stageShipsForCreation(2, 50, 'x');\nplayerLarge.stageShipsForCreation(4, 90, 'x');\nplayerXLarge.stageShipsForCreation(5, 25, 'x');\n\nconst play = Gameboard();\nplay.takeAim(25);\nplay.takeAim(26);\nplay.takeAim(27);\nplay.takeAim(28);\nplay.takeAim(29);\nplay.countShips();\n\nmodule.exports = Gameboard;\n","/* eslint-disable no-param-reassign */\n/* eslint-disable no-unused-expressions */\n/* eslint-disable operator-linebreak */\n/* eslint-disable no-console */\n\n// Creates each ship object\nconst ShipFactory = () => {\n    const shipSegments = {\n        status: 'afloat',\n        size: [],\n        coord: [],\n    };\n\n    // gives coordinates to each ship\n    function giveCoord(start, end) {\n        for (let i = start; i <= end; i += 1) {\n            shipSegments.coord.push(i);\n        }\n        return shipSegments.coord;\n    }\n\n    // creates the ship, and calls giveCoord() for coordinates\n    const createShip = (start, end) => {\n        for (let i = 0; i <= end - start; i += 1) {\n            shipSegments.size\n                .push('safe');\n        }\n        giveCoord(start, end);\n        return shipSegments;\n    };\n\n    function createShipY(start, end) {\n        return {\n            start,\n            end,\n        };\n    }\n\n    function determineAxis(start, end, axis) {\n        return axis === 'x' ?\n            createShip(start, end) :\n            createShipY(start, end);\n    }\n    // function that is called once all ship positions are hit\n    function isSunk(ship) {\n        const shipSunk = ship.size.every((x) => x === 'hit');\n        const shipStatus = shipSunk ? ship.status = 'sunk!' : false;\n        return shipStatus;\n    }\n\n    // function for recording each hit on ships\n    const isHit = (ship, position) => {\n        const chosenPosition = ship.coord;\n        // eslint-disable-next-line no-unused-expressions\n        if (chosenPosition.includes(position)) {\n            ship.coord.forEach((x) => {\n                const index = ship.coord.indexOf(x);\n                return x === position ?\n                    ship.size.splice(index, 1, 'hit') :\n                    undefined;\n            });\n        }\n        return ship;\n    };\n\n    return {\n        createShip, isHit, isSunk, determineAxis,\n    };\n};\n\nmodule.exports = ShipFactory;\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","/* eslint-disable no-unused-vars */\nconst ShipFactory = require('./shipFactory');\nconst Gameboard = require('./Gameboard');\n"],"names":[],"sourceRoot":""}