{"version":3,"file":"main.js","mappings":";;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,uBAAuB,QAAQ;AAC/B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,+DAA+D,wBAAwB;;AAEvF;AACA,yEAAyE,MAAM;AAC/E,0EAA0E,MAAM;AAChF,wEAAwE,MAAM;AAC9E,2EAA2E,MAAM;AACjF;AACA;AACA;AACA;AACA,uFAAuF,sCAAsC;AAC7H,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA,kGAAkG;AAClG,0GAA0G;AAC1G;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;;;;;;;;;;;ACxEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,cAAc,mBAAO,CAAC,2BAAO;AAC7B,oBAAoB,mBAAO,CAAC,2CAAe;;AAE3C;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,wBAAwB,UAAU;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,+BAA+B;AAC/B;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,kBAAkB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,YAAY;AAC1C;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,YAAY;AACxC;AACA;AACA;AACA;AACA,qEAAqE,UAAU;AAC/E;AACA;AACA;AACA,8EAA8E,uBAAuB;AACrG;AACA;AACA,sEAAsE,UAAU;AAChF;AACA;AACA,sEAAsE,UAAU;AAChF;AACA;AACA;AACA;AACA;AACA,4BAA4B,YAAY;AACxC;AACA;AACA;AACA,0EAA0E,uBAAuB;AACjG;AACA;AACA,qEAAqE,UAAU;AAC/E;AACA;AACA;AACA;AACA,qEAAqE,UAAU;AAC/E;AACA;AACA,qEAAqE,UAAU;AAC/E;AACA;AACA,sEAAsE,UAAU;AAChF;AACA;AACA,+EAA+E,wBAAwB;AACvG;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,4BAA4B,OAAO;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,OAAO;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,kBAAkB,cAAc,SAAS;AACzC,eAAe,OAAO;;AAEtB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;;;;;;;;;;;ACrcA;AACA;AACA;AACA,kBAAkB,mBAAO,CAAC,uCAAa;AACvC,aAAa,mBAAO,CAAC,qCAAY;AACjC,cAAc,mBAAO,CAAC,2BAAO;;AAE7B;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;AC7DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,mBAAO,CAAC,uCAAa;;AAEvC;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,CAAC;;AAED;;;;;;;;;;;ACnGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;;;;;;UCzDA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;;;;;ACtBA;AACA;AACA,oBAAoB,mBAAO,CAAC,2CAAe;AAC3C,kBAAkB,mBAAO,CAAC,uCAAa;AACvC,sBAAsB,mBAAO,CAAC,iCAAU;AACxC,cAAc,mBAAO,CAAC,2BAAO;AAC7B,aAAa,mBAAO,CAAC,qCAAY;;AAEjC;AACA;;AAEA;AACA,kDAAkD,uBAAuB;AACzE,gDAAgD,uBAAuB;;AAEvE;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL,CAAC;AACD","sources":["webpack://battle-ship/./src/DOM.js","webpack://battle-ship/./src/Gameboard.js","webpack://battle-ship/./src/Player.js","webpack://battle-ship/./src/gameLoop.js","webpack://battle-ship/./src/shipFactory.js","webpack://battle-ship/webpack/bootstrap","webpack://battle-ship/./src/index.js"],"sourcesContent":["/* eslint-disable no-unused-vars */\n/* eslint-disable no-case-declarations */\n/* eslint-disable no-console */\nconst printToDOM = (() => {\n    const playerContainer = document.querySelector('.player');\n    const compContainer = document.querySelector('.computer');\n\n    function appendSpaces(player) {\n        switch (true) {\n        case player === 'computer':\n            const compSpaces = document.createElement('div');\n            compSpaces.classList.add('compSpace');\n            compContainer.appendChild(compSpaces);\n            break;\n        default:\n            const playerSpaces = document.createElement('div');\n            playerSpaces.classList.add('space');\n            playerContainer.appendChild(playerSpaces);\n        }\n    }\n\n    function placeShip(player) {\n        console.log(`${player} is sucessfull`);\n    }\n    function personOrComputer(player, func) {\n        console.log(player, func);\n        return func;\n    }\n\n    function playerGrid(grid) {\n        console.log(grid);\n    }\n\n    // function indicate(position, action) {\n    //     const leftPosition = position - 2;\n    //     const rightPosition = position;\n    //     const topPosition = position - 11;\n    //     const bottomPosition = position + 9;\n    //     const color = \"box-shadow: inset 0px 0px 3px white; background-color: white;\";\n\n    //     if (action === 'hit') {\n    //         playerContainer.children[leftPosition].style.cssText = `${color}`;\n    //         playerContainer.children[rightPosition].style.cssText = `${color}`;\n    //         playerContainer.children[topPosition].style.cssText = `${color}`;\n    //         playerContainer.children[bottomPosition].style.cssText = `${color}`;\n    //     }\n    // }\n    function playerShipColor(positions) {\n        positions.forEach((a) => {\n            playerContainer.children[a].style.cssText = 'background-color: aquamarine; box-shadow: inset 0px 0px 1px black'; // #FFA826\n        });\n    }\n\n    function trackPlays(position, action) {\n        console.log(position);\n        // eslint-disable-next-line no-unused-expressions\n        action === 'hit'\n            ? compContainer.children[position - 1].style.cssText = 'background-color: aquamarine; box-shadow: inset 0px 0px 1px black' // #FFA826\n            : compContainer.children[position - 1].style.cssText = 'background-color: rgb(197, 197, 197); box-shadow: inset 0px 0px 1px rgba(0, 0, 0, 0.5)';\n        // indicate(position, action);\n    }\n\n    return {\n        spaces: appendSpaces,\n        verifyPlayerID: personOrComputer,\n        placeShip,\n        plays: trackPlays,\n        playerGrid,\n        playerShipColor,\n    };\n})();\n\nmodule.exports = printToDOM;\n","/* eslint-disable no-cond-assign */\n/* eslint-disable max-len */\n/* eslint-disable no-underscore-dangle */\n/* eslint-disable no-use-before-define */\n/* eslint-disable no-param-reassign */\n/* eslint-disable no-useless-computed-key */\n/* eslint-disable no-unused-vars */\n/* eslint-disable no-undef */\n/* eslint-disable no-return-assign */\n/* eslint-disable consistent-return */\n/* eslint-disable default-case */\n/* eslint-disable no-case-declarations */\n/* eslint-disable no-unused-expressions */\n/* eslint-disable operator-linebreak */\n/* eslint-disable no-trailing-spaces */\n/* eslint-disable no-console */\n\nconst print = require('./DOM');\nconst shipFactory = require('./shipFactory');\n\n// tracks each hit && miss of all players\nconst playerLog = {\n    player1: {\n        misses: [],\n        hits: [],\n    },\n    computer: {\n        misses: [],\n        hits: [],\n    },\n};\n\n// Contains all required info about the board the game exists in\nconst board = {\n    ['player1']: { \n        name: '',\n        size: {\n            columns: 0,\n            rows: 0,\n        },\n        ships: [6],\n        grid: [],\n        taken: [],\n        turn: true,\n    },\n\n    ['computer']: {\n        name: 'computer',\n        size: {\n            columns: 0,\n            rows: 0,\n        },\n        ships: [6],\n        grid: [],\n        taken: [],\n        turn: false,\n    },\n};\n\n/* eslint-disable no-unused-vars */\nconst gameBoard = (name) => {\n    // Creates an instance of shipFactory once here\n    const players = shipFactory();\n    const user = playerLog.player1;\n    const comp = playerLog.computer;\n\n    let totalShips = 6;\n\n    // Creates the game grid itself\n    function gridCreate(x, player) {\n        const grid = x * x;\n        for (let i = 0; i < grid; i += 1) {\n            board[player].grid\n                .push(i + 1);\n            player === 'computer' ?\n                print.spaces('computer') : print.spaces('player1');\n        }\n        return board.player1.grid;\n    }\n\n    // Allows the grid to adjust according to the number given\n    function gridSize(x, player) {\n        board[player].name = player;\n        player1.name = player;\n        board[player].size = { columns: x, rows: x };\n        gridCreate(x, player);\n        return board;\n    }\n\n    // Grabs the status of each ship on the board\n    function statusOfShips() {\n        const grids = board.player1.grid;\n        const gridContain = [];\n        grids.forEach((x) => {\n            x.status ? gridContain.push(x) : 'run';\n        });\n        return gridContain;\n    }\n\n    // tallies up each ship left afloat\n    function countShips() {\n        let currentShip = null;\n        const ships = statusOfShips();\n        const total = {\n            playerShips: null,\n            status: [],\n        };\n        const graph = ships.map((a) => a.coord);\n        const status = ships.map((a) => a.status);\n        \n        for (let i = 0; i < graph.length; i += 1) {\n            if (graph[i] !== currentShip) {\n                currentShip = graph[i];\n                total.status.push(status[i]);\n                total.playerShips += 1;\n            }\n        }\n        console.log(ships);\n        return total;\n    }\n\n    // Logs activties of each player (misses / hits)\n    function trackPlays(position, player, action) {\n        switch (true) {\n        case player === 'player1':\n            action === 'hit' ? user.hits.push(position) : user.misses.push(position);\n            print.plays(position, action);\n            return user;\n        case player === 'computer':\n            action === 'hit' ? comp.hits.push(position) : comp.misses.push(position);\n            return comp;\n        }\n    }\n\n    // checks that the ship that was hit is still floating -- if not, it is subtracted from total remaining ships\n    function isShipStillFloating(ship) {\n        const shipsLeft = board.player1.ships;\n        ship.status === 'sunk!' ? \n            totalShips -= 1 : totalShips += 0;\n        return totalShips === 0 ? \n            shipsLeft[0] = 'Your fleet has been lost!' : \n            shipsLeft[0] = `${totalShips} of 6 ships remain!`;\n    }\n\n    // Records which ship was hit where\n    function hit(ship, position, player) {\n        // return \n        const newShip = players.isHit(ship, position);\n        isShipStillFloating(newShip);\n        trackPlays(position, player, 'hit');\n        print.plays(position, 'hit');\n        return newShip;\n    }\n\n    // Allows the user and computer to take a shot\n    function takeAim(position, player) {\n        const newPosition = position - 1;\n        const ship = board.computer.grid[newPosition];\n        console.log(typeof board.computer.grid[newPosition] === 'number' ? \n            trackPlays(position, player, 'miss') : hit(ship, position, player));\n    }\n\n    function createPlayerShip(ships, newShip) {\n        ships.forEach((space) => {\n            const index = ships.indexOf(space);\n            board.player1.grid\n                .splice(ships[index], 1, newShip);\n        });\n    }\n\n    function createComputerShips(ships, newShip) {\n        ships.forEach((space) => {\n            const index = ships.indexOf(space);\n            board.computer.grid\n                .splice(ships[index], 1, newShip);\n        });\n        const takenSpaces = board.computer.grid.filter((a) => typeof a === 'object');\n        takenSpaces.forEach((a) => {\n        });\n    }\n    // Creates a ship and places it on the board\n    function createShip(ships, axis, player, i) {\n        let playerBoard = '';\n        let newShip = '';\n        let situation = true;\n        player.name === 'computer' ? playerBoard = board.computer : playerBoard = board.player1;\n        ships.forEach((a) => {\n            if (typeof playerBoard.grid[a - 1] === 'object') {\n                situation = false;\n            } \n        });\n        if (situation === true) {\n            newShip = players.createShip(ships);\n            player.name === 'computer' \n                ? createComputerShips(ships, newShip)\n                : createPlayerShip(ships, newShip); \n        } \n    }\n\n    function prepareShipForCreation(length, position, axis, player, k) {\n        let ship = [];    \n        let playerBoard = '';\n        player.name === 'computer' ? playerBoard = board.computer : playerBoard = board.player1;\n        switch (true) {\n        case axis === 'x':\n            ship = [];\n            for (let i = 0; i < length; i += 1) {\n                ship.push(i === 0 ? position : position += 1);\n                playerBoard.taken.push(position);\n                // Marks spaces around each chosen grid space\n                // playerBoard.grid[position] > 0 && typeof playerBoard.grid[position] === 'number' \n                //     ? playerBoard.grid.splice(position - 1, 1, `${position} speed before`) \n                //     : '';\n                // playerBoard.grid[position + length + 10] < 100 && typeof playerBoard.grid[position + length + 10] === 'number' &&\n                // playerBoard.grid[position + length + 10] > 0\n                //     ? playerBoard.grid.splice(position + length - 1, 1, `${position + length - 2} speed after line 216`) \n                //     : '';\n                // playerBoard.grid[position - 10] > 0 && typeof playerBoard.grid[position - 10] === 'number' \n                //     ? playerBoard.grid.splice(position - 10, 1, `${position} speed - 10`) \n                //     : '';\n                // playerBoard.grid[position + 10] < 100 && typeof playerBoard.grid[position + 10] === 'number' \n                //     ? playerBoard.grid.splice(position + 10, 1, `${position} speed + 10`) \n                //     : '';\n            }\n            break;\n        case axis === 'y':\n            ship = [];\n            for (let i = 0; i < length; i += 1) {\n                // ship.push(i === 0 ? position : position += 10);\n                // // Marks spaces around each chosen grid space\n                // playerBoard.grid[position + length + 10] < 99 && typeof playerBoard.grid[position + length + 10] === 'number' \n                //     ? playerBoard.grid.splice(position + length, 1, `${position + length - 1} speed after`) \n                //     : '';\n                // playerBoard.grid[position] > 0 && typeof playerBoard.grid[position] === 'number' \n                //     ? playerBoard.grid.splice(position - 1, 1, `${position} speed before`) \n                //     : '';\n                playerBoard.taken.push(i === 0 ? position : position += 10);\n                ship.push(i === 0 ? position += 0 : position);\n                // playerBoard.grid[position - 1] > 0 && typeof playerBoard.grid[position - 1] === 'number' \n                //     ? playerBoard.grid.splice(position - 1, 1, `${position} speed - 1`) \n                //     : '';\n                // playerBoard.grid[position + 1] < 100 && typeof playerBoard.grid[position + 1] === 'number' \n                //     ? playerBoard.grid.splice(position + 1, 1, `${position} speed + 1`) \n                //     : '';\n                // playerBoard.grid[position - 10] > 0 && typeof playerBoard.grid[position - 10] === 'number'\n                //     ? playerBoard.grid.splice(position - 10, 1, `${position} speed before`)\n                //     : '';\n                // playerBoard.grid[position + length + 10] < 100 && typeof playerBoard.grid[position + length + 10] === 'number'\n                //     ? playerBoard.grid.splice(position + length + 10, 1, `${position + length + 10} speed after`)\n                //     : '';\n            }\n            break;\n        }\n        // add an 'if number exists in playerboard.taken[] then fetch a new number' conditional\n        createShip(ship, axis, player, k);\n    }  \n\n    function repositionShip(ship, player, axis, i) {\n        const newShip = [];\n        const random = Math.floor(Math.random() * 100);\n        switch (true) {\n        case axis === 'x':\n            gatherShipMaterials(ship.length, player, 'x', i);\n            break;\n        case axis === 'y':\n            gatherShipMaterials(ship.length, player, 'y', i);\n            break;\n        }\n    }\n    \n    function simpleNumberGeneration(playerBoard, axis, i) {\n        const filteredGrid = playerBoard.grid.filter((a) => typeof a !== 'object');\n        const m = filteredGrid.length;\n        const n = filteredGrid[Math.floor(Math.random() * m)];\n        return axis === 'x'\n            ? xPrep(n, i)\n            : yPrep(n, i);\n    }\n\n    function yPrep(n, i) {\n        const total = n + (10 * i);\n        n + (10 * i) > 100 ? n -= total - 100 : n;\n        return n;\n    }\n\n    function xPrep(n, i) {\n        // // 9 + 5\n        // const sum = n + i;\n        // // 9 / 10\n        // const newNum = Math.floor((n / 10));\n        // const diff = Math.floor((newNum * 10) / 9);\n        // newNum === 0 ? newNum + 10 : newNum * 10;\n        // sum > diff\n        //     ? n -= (n + i - diff)\n        //     : (newNum * 10) + 9;\n        //     console.log(n, 'X', i);\n        const total = n + i;\n        total > 100 \n            ? n -= n - i\n            : n;\n        total > Math.floor((n / 10)) * 10 + 9\n            ? n -= i \n            : n;\n        console.log(n, i, 'x');\n        return n;\n    }\n\n    function gridVerification(playerBoard, i, n, axis) {\n        switch (true) {\n        case axis === 'x':\n            for (let z = 0; z < i; z += 1) {\n                // typeof playerBoard.grid[n] === 'object' && n <= 100\n                //     ? console.log('yes, object')\n                //     : console.log('no, number');\n                n += 1;\n            }\n            break;\n        case axis === 'y':\n            for (let z = 0; z < i; z += 1) {\n                typeof playerBoard.grid[n] === 'object' && n <= 100\n                    ? console.log('yes, object Y')\n                    : console.log('no, number Y');\n                console.log(playerBoard.grid[n], n);\n                n += 10;\n            }\n        }\n    }\n    // Generates a number, and ensures all ships keep inside of the grid\n    function randomNumberGeneration(axis, i, player) {\n        let playerBoard = '';\n        player === 'computer' ? playerBoard = board.computer : playerBoard = board.player1;\n\n        const n = simpleNumberGeneration(playerBoard, axis, i);\n        // axis === 'y' \n        //     ? gridVerification(playerBoard, i, n, axis)\n        //     : gridVerification(playerBoard, i, n, axis);\n        // Conditional that ensures each ship will display within the grid\n        return n;\n    }\n           \n    function randomAxisGeneration(ship, player) {\n        let axis = Math.floor(Math.random() * 2);\n        axis === 0 \n            ? axis = 'x' \n            : axis = 'y';\n        return axis;\n    }\n\n    // Crutial step that gathers needed info for proper placement of ships\n    function gatherShipMaterials(shipLength, player, axis, i) {\n        prepareShipForCreation(shipLength, randomNumberGeneration(axis, shipLength, player), axis, player, i);\n        console.log(i);\n    }\n\n    // Functionality for randomizing and placing computer ships\n    function randomizedShips(player) {\n        // eslint-disable-next-line no-unused-expressions\n        player === 'computer' ? player = computer : player = player1;\n        let i = 0;\n        player.shipNames.forEach((names) => {\n            // playergatherShipMaterials(ship, player, randomAxisGeneration(player.shipsLength[i], player), i);\n            names.gatherShipMaterials(player.shipsLength[i], player, randomAxisGeneration(player.shipsLength[i], player), i);\n            i += 1;\n        });\n        const colorMyGrid = board.player1.taken;\n        print.playerShipColor(colorMyGrid);\n    }\n\n    function reportGrids() {\n        console.log('Computer:', board.computer.grid);\n        console.log('Player 1:', board.player1.grid);\n    }\n\n    return {\n        gridSize, \n        // stageShipsForCreation, \n        hit, \n        takeAim, \n        statusOfShips, \n        countShips, \n        isShipStillFloating,\n        // gridSpaceVerification,\n        prepareShipForCreation,\n        randomizedShips,\n        gatherShipMaterials,\n        reportGrids,\n    };\n};\n\n// Player1 Ships\nconst pShip1 = gameBoard();\nconst pShip2 = gameBoard();\nconst pShip3 = gameBoard();\nconst pShip4 = gameBoard();\nconst pShip5 = gameBoard();\nconst pShip6 = gameBoard();\n\n// Computer Ships\nconst cShip1 = gameBoard();\nconst cShip2 = gameBoard();\nconst cShip3 = gameBoard();\nconst cShip4 = gameBoard();\nconst cShip5 = gameBoard();\nconst cShip6 = gameBoard();\n\nconst computer = {\n    name: 'computer',\n    shipCoord: [],\n    shipsLength: [5, 4, 3, 2, 1, 1],\n    shipNames: [cShip1, cShip2, cShip3, cShip4, cShip5, cShip6],\n};\n\nconst player1 = {\n    name: '',\n    shipCoord: [],\n    shipsLength: [5, 4, 3, 2, 1, 1],\n    shipNames: [pShip1, pShip2, pShip3, pShip4, pShip5, pShip6],\n};\n\n// // Parses info given that will then be used to create a ship\n// function stageShipsForCreation(ship, axis, playerName) {\n//     switch (true) {\n//     case axis === 'x': \n//         return createShip(ship, axis, playerName);\n//     case axis === 'y': \n//         return createShip(ship, axis, pla);\n//     }\n//     // playerName === 'computer' \n//     // ? board[playerName].shipCoord.push()\n// }\n\n// function gridSpaceVerification(ship, axis, playerName) {\n//     playerName === 'computer' ? board.computer.name = 'computer' : board.player1.name = playerName;\n//     playerName === 'computer' ? playerName = board.computer : playerName = board.player1;\n//     // const { playerName: { grid } } = grid;\n//     const { grid } = playerName;\n\n//     let retry = false;\n\n//     ship.forEach((n) => {\n//         // typeof grid[n] === 'number' ? createShip(ship, axis, playerName) \n//         // : repositionShip(ship, playerName);\n//         switch (true) { \n//         case typeof grid[n] !== 'number':\n//             retry = true;\n//             break;\n//         case n < 100 && n + ship.length < 100:\n//             retry = false;\n//             createShip(ship, axis, playerName.name);\n//         }\n//     });\n// randomize(ship.length, axis, playerName.name);\n// }   \nmodule.exports = gameBoard;\n","/* eslint-disable no-console */\n/* eslint-disable operator-linebreak */\n/* eslint-disable no-unused-vars */\nconst gameBoard = require('./Gameboard');\nconst loop = require('./gameLoop');\nconst print = require('./DOM');\n\nconst gB = gameBoard();\n\nconst Player = (name, turn) => {\n    const player = {\n        name: '',\n        shot: [],\n        turn,\n        ships: [1, 1, 2, 3, 4, 5],\n    };\n\n    const computerGrid = document.querySelector('.computer').childNodes;\n    const spaces = Array.from(computerGrid);\n\n    function turnOrder() {\n        // player.turn === true ?\n        //     player.turn = false : player.turn = true;\n    }\n\n    function shoot(coord) {\n        player.shot.push(coord);\n        // turnOrder();\n        setTimeout(gB.takeAim(coord, 'player1'), 100);\n    }\n\n    // eslint-disable-next-line consistent-return\n    function aim(coord) {\n        switch (true) {\n        case player.turn === false:\n            return 'It is not your turn';\n        default:\n            return player.shot.includes(coord) ?\n                'You already shot this spot' : shoot(coord);\n        }\n    }\n\n    function activateComputerGrid() {\n        spaces.forEach((x) => x.addEventListener('click', (e) => {\n            console.log(spaces.indexOf(e.target) + 1);\n            aim(spaces.indexOf(e.target) + 1);\n        }));\n    }\n\n    function shipAction(names, funct) {\n        print.verifyPlayerID(names, funct);\n    }\n\n    return {\n        aim,\n        turnOrder,\n        shipAction,\n        activateComputerGrid,\n    };\n};\n\nmodule.exports = Player;\n","/* eslint-disable default-case */\n/* eslint-disable no-unused-expressions */\n/* eslint-disable no-param-reassign */\n/* eslint-disable no-console */\n/* eslint-disable no-unused-vars */\n/* eslint-disable no-return-assign */\n/* eslint-disable operator-linebreak */\n/* eslint-disable no-const-assign */\nconst gameBoard = require('./Gameboard');\n\nconst gB = gameBoard();\n// Player1 Ships\n\nconst GameLoop = (() => {\n    const player1 = {\n        name: null,\n        turn: true,\n    };\n\n    const computer = {\n        name: 'computer',\n        turn: false,\n    };\n\n    // conditionals to handle drag ships button\n    const dragButton = document.querySelector('.drag');\n    const randomizeButton = document.querySelector('.randomize');\n    const dragShipPanel = document.createElement('div');\n    let dragConditional = true;\n\n    // will be used for turn order enforcement\n    const turnOrderSwitch = 'player1';\n\n    // variables for targeting each grid container\n    const playerContainer = document.querySelector('.player');\n    const compContainer = document.querySelector('.computer');\n\n    // allows both computer and user to randomize their ships\n    function prepareShips(player) {\n        switch (true) {\n        case player === 'computer':\n            gB.randomizedShips('computer');\n            break;\n        case player !== 'computer':\n            player1.name = player;\n            gB.randomizedShips(player);\n            break;\n        }\n    }\n\n    // function that handles the creation of the ship dragging panel\n    function dragPanel() {\n        const body = document.querySelector('body');\n        dragShipPanel.classList.add('shipContainer');\n        body.appendChild(dragShipPanel);\n        dragConditional = false;\n    }\n\n    // function that handles the deletion of the ship dragging panel\n    function dragPanelClose() {\n        const body = document.querySelector('body');\n        body.removeChild(dragShipPanel);\n        dragConditional = true;\n    }\n\n    // Listens for the drag ships button to be clicked\n    dragButton.addEventListener('click', () => {\n        dragConditional === true\n            ? dragPanel()\n            : dragPanelClose();\n    });\n\n    // Listens for the randomize button\n    randomizeButton.addEventListener('click', () => {\n        prepareShips('computer');\n        prepareShips('player1');\n        const players = document.querySelector('.player');\n        const computers = document.querySelector('.computer');\n        gB.reportGrids();\n    });\n\n    // will use the above created 'turnOrderSwitch' variable to enforce turn order\n    function isItMyTurn(player) {\n        switch (true) {\n        case player !== 'computer':\n            return turnOrderSwitch === 'player1' ?\n                'it is not your turn' : turnOrderSwitch = 'player1';\n        default:\n            return turnOrderSwitch === 'computer' ?\n                'it is not your turn' : turnOrderSwitch = 'computer';\n        }\n    }\n\n    return {\n        turnOrder: isItMyTurn,\n        prepareShips,\n    };\n})();\n\nmodule.exports = GameLoop;\n","/* eslint-disable no-unused-vars */\n/* eslint-disable no-param-reassign */\n/* eslint-disable no-unused-expressions */\n/* eslint-disable operator-linebreak */\n/* eslint-disable no-console */\n\n// Creates each ship object\nconst shipFactory = (ships) => {\n    const shipSegments = {\n        status: 'afloat',\n        size: [],\n        coord: [],\n    };\n\n    // gives coordinates to each ship\n    function giveCoord(ship) {\n        shipSegments.coord.push(ship);\n        return shipSegments.coord;\n    }\n\n    // creates the ship, and calls giveCoord() for coordinates\n    const createShip = (ship) => {\n        ship.forEach((space) => {\n            shipSegments.size.push('safe');\n        });\n        giveCoord(ship);\n        return shipSegments;\n    };\n\n    // function that is called once all ship positions are hit\n    function isSunk(ship) {\n        const shipSunk = ship.size.every((x) => x === 'hit');\n        const shipStatus = shipSunk ? ship.status = 'sunk!' : false;\n        return shipStatus;\n    }\n\n    // function for recording each hit on ships\n    const isHit = (ship, position) => {\n        const chosenPosition = ship.coord;\n        // eslint-disable-next-line no-unused-expressions\n        if (chosenPosition.includes(position)) {\n            ship.coord.forEach((x) => {\n                const index = ship.coord.indexOf(x);\n                x === position ?\n                    ship.size.splice(index, 1, 'hit') :\n                    undefined;\n            });\n        }\n        isSunk(ship);\n        return ship;\n    };\n\n    return {\n        createShip, isHit, isSunk,\n    };\n};\n\nmodule.exports = shipFactory;\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","/* eslint-disable no-console */\n/* eslint-disable no-unused-vars */\nconst ShipFactory = require('./shipFactory');\nconst Gameboard = require('./Gameboard');\nconst playerFactory = require('./Player');\nconst print = require('./DOM');\nconst loop = require('./gameLoop');\n\nconst player1 = playerFactory('Devin', true);\nconst computer = playerFactory('computer', false);\n\nwindow.addEventListener('load', () => {\n    const compBoard = Gameboard(10, 'computer', { columns: 10, rows: 10 });\n    const userBoard = Gameboard(10, 'player', { columns: 10, rows: 10 });\n\n    compBoard.gridSize(10, 'computer');\n    userBoard.gridSize(10, 'player1');\n\n    const computerGrid = document.querySelector('.computer').childNodes;\n    const spaces = Array.from(computerGrid);\n    spaces.forEach((space) => space.addEventListener('click', (e) => {\n        player1.aim(spaces.indexOf(space) + 1);\n    }));\n});\n// n + (10 * i) > 100 ? n -= (10 * i) : n;\n"],"names":[],"sourceRoot":""}