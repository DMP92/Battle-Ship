{"version":3,"file":"main.js","mappings":";;;;;;;;;AAAA,eAAe,mBAAO,CAAC,iCAAU;;AAEjC;AACA,YAAY,yBAAyB;;AAErC;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;ACZA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,uBAAuB,QAAQ;AAC/B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;;;;;;;;;;;ACjCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,mBAAO,CAAC,2BAAO;AAC7B,oBAAoB,mBAAO,CAAC,2CAAe;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,wBAAwB,UAAU;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,kBAAkB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,YAAY;AAC1C;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,wBAAwB,oBAAoB;AAC5C;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;AChNA;AACA;AACA,kBAAkB,mBAAO,CAAC,uCAAa;AACvC,aAAa,mBAAO,CAAC,qCAAY;AACjC,cAAc,mBAAO,CAAC,2BAAO;;AAE7B;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;;;;;;;;;;ACjDA;AACA;AACA;AACA;AACA,kBAAkB,mBAAO,CAAC,uCAAa;;AAEvC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;;AAEA;AACA;;AAEA;;;;;;;;;;;AC/CA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,4BAA4B,UAAU;AACtC;AACA;AACA;AACA;;AAEA;AACA;AACA,wBAAwB,kBAAkB;AAC1C;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;;;;;;UCvEA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;;;;;ACtBA;AACA;AACA,oBAAoB,mBAAO,CAAC,2CAAe;AAC3C,kBAAkB,mBAAO,CAAC,uCAAa;AACvC,eAAe,mBAAO,CAAC,iCAAU;AACjC,iBAAiB,mBAAO,CAAC,qCAAY;AACrC,cAAc,mBAAO,CAAC,2BAAO;AAC7B,aAAa,mBAAO,CAAC,qCAAY;;AAEjC;AACA;AACA;AACA;AACA,CAAC","sources":["webpack://battle-ship/./src/Computer.js","webpack://battle-ship/./src/DOM.js","webpack://battle-ship/./src/Gameboard.js","webpack://battle-ship/./src/Player.js","webpack://battle-ship/./src/gameLoop.js","webpack://battle-ship/./src/shipFactory.js","webpack://battle-ship/webpack/bootstrap","webpack://battle-ship/./src/index.js"],"sourcesContent":["const Player = require('./Player');\n\nconst Computer = (name, board, turn) => {\n    const { player, aim, turnOrder } = Player(name, board, turn);\n\n    return {\n        player,\n        aim,\n        turnOrder,\n    };\n};\n\nmodule.exports = Computer;\n","const printToDOM = (() => {\n    const playerContainer = document.querySelector('.player');\n    const compContainer = document.querySelector('.computer');\n\n    function appendSpaces(player) {\n        switch (true) {\n        case player === 'computer':\n            const compSpaces = document.createElement('div');\n            compSpaces.classList.add('space');\n            compContainer.appendChild(compSpaces);\n            break;\n        default:\n            const playerSpaces = document.createElement('div');\n            playerSpaces.classList.add('space');\n            playerContainer.appendChild(playerSpaces);\n        }\n    }\n\n    function placeShip(player) {\n        console.log(`${player} is sucessfull`);\n    }\n    function personOrComputer(player, func) {\n        console.log(player, func);\n        return func;\n    }\n\n    return {\n        spaces: appendSpaces,\n        verifyPlayerID: personOrComputer,\n        placeShip,\n    };\n})();\n\nmodule.exports = printToDOM;\n","/* eslint-disable no-unused-vars */\n/* eslint-disable no-undef */\n/* eslint-disable no-return-assign */\n/* eslint-disable consistent-return */\n/* eslint-disable default-case */\n/* eslint-disable no-case-declarations */\n/* eslint-disable no-unused-expressions */\n/* eslint-disable operator-linebreak */\n/* eslint-disable no-trailing-spaces */\n/* eslint-disable no-console */\nconst print = require('./DOM');\nconst shipFactory = require('./shipFactory');\n// Contains all required info about the board the game exists in\nconst board = {\n    player1: { \n        size: {\n            columns: 0,\n            rows: 0,\n        },\n        ships: [6],\n        grid: [],\n    },\n\n    computer: {\n        size: {\n            columns: 0,\n            rows: 0,\n        },\n        ships: [6],\n        grid: [],\n    },\n};\n// tracks each hit && miss of all players\nconst playerLog = {\n    player1: {\n        misses: [],\n        hits: [],\n    },\n    computer: {\n        misses: [],\n        hits: [],\n    },\n};\n/* eslint-disable no-unused-vars */\nconst Gameboard = () => {\n    // Creates an instance of shipFactory once here\n    const players = shipFactory();\n\n    const user = playerLog.player1;\n    const comp = playerLog.computer;\n\n    let totalShips = 6;\n\n    // Creates the game grid itself\n    function gridCreate(x, player) {\n        const grid = x * x;\n        for (let i = 0; i < grid; i += 1) {\n            board.player1.grid\n                .push(i + 1);\n            player === 'computer' ?\n                print.spaces('computer') : print.spaces('player1');\n        }\n        return board.player1.grid;\n    }\n\n    // Allows the grid to adjust according to the number given\n    function gridSize(x, player) {\n        board.player1.size.columns = x;\n        board.player1.size.rows = x;\n        gridCreate(x, player);\n        return board;\n    }\n\n    // Grabs the status of each ship on the board\n    function statusOfShips() {\n        const grids = board.player1.grid;\n        const gridContain = [];\n        grids.forEach((x) => {\n            x.status ? gridContain.push(x) : 'run';\n        });\n        return gridContain;\n    }\n\n    // tallies up each ship left afloat\n    function countShips() {\n        let currentShip = null;\n        const ships = statusOfShips();\n        const total = {\n            playerShips: null,\n            status: [],\n        };\n        const graph = ships.map((a) => a.coord);\n        const status = ships.map((a) => a.status);\n        \n        for (let i = 0; i < graph.length; i += 1) {\n            if (graph[i] !== currentShip) {\n                currentShip = graph[i];\n                total.status.push(status[i]);\n                total.playerShips += 1;\n            }\n        }\n        return total;\n    }\n\n    // Logs activties of each player (misses / hits)\n    function trackPlays(position, player, action) {\n        switch (true) {\n        case player === 'player1':\n            action === 'hit' ? user.hits.push(position) : user.misses.push(position);\n            return user;\n        case player === 'computer':\n            action === 'hit' ? comp.hits.push(position) : comp.misses.push(position);\n            return comp;\n        }\n    }\n\n    function isShipStillFloating(ship) {\n        const shipsLeft = board.player1.ships;\n        ship.status === 'sunk!' ? \n            totalShips -= 1 : totalShips += 0;\n        return totalShips === 0 ? \n            shipsLeft[0] = 'Your fleet has been lost!' : \n            shipsLeft[0] = `${totalShips} of 6 ships remain!`;\n    }\n\n    // Records which ship was hit where\n    function hit(ship, position, player) {\n        trackPlays(position, player, 'hit');\n        // return \n        const newShip = players.isHit(ship, position);\n        isShipStillFloating(newShip);\n        return newShip;\n    }\n\n    // Allows the user and computer to take a shot\n    function takeAim(position, player) {\n        const newPosition = position - 1;\n        const ship = board.player1.grid[newPosition];\n        return typeof board.player1.grid[newPosition] === 'number' ? \n            trackPlays(position, player, 'miss') : hit(ship, position, player);\n    }\n\n    // Creates a ship and places it on the board\n    function createShip(start, end, axis) {\n        const ship = players.determineAxis(start, end, axis);\n        for (let i = 0; i <= (end - start); i += 1) {\n            board.player1.grid\n                .splice((start - 1) + i, 1, ship);\n        }\n        return ship;\n    }\n\n    // Parses info given that will then be used to create a ship\n    function stageShipsForCreation(length, position, axis) {\n        const start = position;\n        const end = position + length - 1;\n\n        switch (true) {\n        case axis === 'x': \n            return createShip(start, end, axis);\n        case axis === 'y': \n            return createShip(start, end, axis);\n        }\n    }\n\n    return {\n        gridSize, \n        stageShipsForCreation, \n        hit, \n        takeAim, \n        statusOfShips, \n        countShips, \n        isShipStillFloating,\n    };\n};\n\n// const playerSmall = Gameboard();\n// const playerSmall2 = Gameboard();\n// const playerSmall3 = Gameboard();\n// const playerMed = Gameboard();\n// const playerLarge = Gameboard();\n// const playerXLarge = Gameboard();\n\n// playerSmall.stageShipsForCreation(1, 3, 'x');\n// playerSmall2.stageShipsForCreation(1, 70, 'x');\n// playerSmall3.stageShipsForCreation(1, 5, 'x');\n// playerMed.stageShipsForCreation(2, 50, 'x');\n// playerLarge.stageShipsForCreation(4, 90, 'x');\n// playerXLarge.stageShipsForCreation(5, 25, 'x');\n\n// const play = Gameboard();\n// play.takeAim(25);\n// play.takeAim(26);\n// play.takeAim(27);\n// play.takeAim(28);\n// play.takeAim(29);\n// play.takeAim(70);\n// play.takeAim(50);\n// play.takeAim(51);\n// play.takeAim(5);\n// play.takeAim(90);\n// play.takeAim(91);\n// play.takeAim(92);\n// play.takeAim(93);\n// play.takeAim(3);\n// play.statusOfShips();\n// playerXLarge.countShips();\n\nmodule.exports = Gameboard;\n","/* eslint-disable operator-linebreak */\n/* eslint-disable no-unused-vars */\nconst gameboard = require('./Gameboard');\nconst loop = require('./gameLoop');\nconst print = require('./DOM');\n\nconst Player = (name, board, turn) => {\n    const player = {\n        name,\n        shot: [],\n        turn,\n    };\n\n    function turnOrder() {\n        // player.turn === true ?\n        //     player.turn = false : player.turn = true;\n    }\n\n    function shoot(coord) {\n        player.shot.push(coord);\n        turnOrder();\n        return board.takeAim(coord);\n    }\n\n    // eslint-disable-next-line consistent-return\n    function aim(coord) {\n        switch (true) {\n        case player.turn === false:\n            return 'It is not your turn';\n        default:\n            return player.shot.includes(coord) ?\n                'You already shot this spot' : shoot(coord);\n        }\n    }\n\n    function shipAction(names, funct) {\n        print.verifyPlayerID(names, funct);\n    }\n\n    return {\n        player,\n        aim,\n        turnOrder,\n        shipAction,\n    };\n};\n\nconst run = Player();\n\nmodule.exports = Player;\n","/* eslint-disable no-unused-vars */\n/* eslint-disable no-return-assign */\n/* eslint-disable operator-linebreak */\n/* eslint-disable no-const-assign */\nconst Gameboard = require('./Gameboard');\n\nconst GameLoop = (() => {\n    const turnOrderSwitch = 'player1';\n    const playerContainer = document.querySelector('.player');\n    const compContainer = document.querySelector('.computer');\n\n    // Creates both player and computer boards\n    function createBoard() {\n        const playerBoard = Gameboard();\n        const compBoard = Gameboard();\n        playerBoard.gridSize(10, 'player1');\n        compBoard.gridSize(10, 'computer');\n    }\n\n    function placeShips(player) {\n        console.log(player);\n    }\n\n    function isItMyTurn(name) {\n        switch (true) {\n        case name !== 'computer':\n            return turnOrderSwitch === 'player1' ?\n                'it is not your turn' : turnOrderSwitch = 'player1';\n        default:\n            return turnOrderSwitch === 'computer' ?\n                'it is not your turn' : turnOrderSwitch = 'computer';\n        }\n    }\n\n    return {\n        turnOrder: isItMyTurn,\n        createBoard,\n        placeShips,\n    };\n})();\n\nconst currentGame = GameLoop;\nwindow.addEventListener('load', currentGame.createBoard);\n\n// compBoard.stageShipsForCreation(1, 5, 'x');\n// playerBoard.stageShipsForCreation(1, 5, 'x');\n\nmodule.exports = GameLoop;\n","/* eslint-disable no-param-reassign */\n/* eslint-disable no-unused-expressions */\n/* eslint-disable operator-linebreak */\n/* eslint-disable no-console */\n\n// Creates each ship object\nconst ShipFactory = () => {\n    const shipSegments = {\n        status: 'afloat',\n        size: [],\n        coord: [],\n    };\n\n    // gives coordinates to each ship\n    function giveCoord(start, end) {\n        for (let i = start; i <= end; i += 1) {\n            shipSegments.coord.push(i);\n        }\n        return shipSegments.coord;\n    }\n\n    // creates the ship, and calls giveCoord() for coordinates\n    const createShip = (start, end) => {\n        for (let i = 0; i <= end - start; i += 1) {\n            shipSegments.size\n                .push('safe');\n        }\n        giveCoord(start, end);\n        return shipSegments;\n    };\n\n    function createShipY(start, end) {\n        return {\n            start,\n            end,\n        };\n    }\n\n    function determineAxis(start, end, axis) {\n        return axis === 'x' ?\n            createShip(start, end) :\n            createShipY(start, end);\n    }\n    // function that is called once all ship positions are hit\n    function isSunk(ship) {\n        const shipSunk = ship.size.every((x) => x === 'hit');\n        const shipStatus = shipSunk ? ship.status = 'sunk!' : false;\n        return shipStatus;\n    }\n\n    // function for recording each hit on ships\n    const isHit = (ship, position) => {\n        const chosenPosition = ship.coord;\n        // eslint-disable-next-line no-unused-expressions\n        if (chosenPosition.includes(position)) {\n            ship.coord.forEach((x) => {\n                const index = ship.coord.indexOf(x);\n                x === position ?\n                    ship.size.splice(index, 1, 'hit') :\n                    undefined;\n            });\n        }\n        isSunk(ship);\n        return ship;\n    };\n\n    return {\n        createShip, isHit, isSunk, determineAxis,\n    };\n};\n\nmodule.exports = ShipFactory;\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","/* eslint-disable no-console */\n/* eslint-disable no-unused-vars */\nconst ShipFactory = require('./shipFactory');\nconst Gameboard = require('./Gameboard');\nconst Player = require('./Player');\nconst Computer = require('./Computer');\nconst print = require('./DOM');\nconst loop = require('./gameLoop');\n\nconst space = document.querySelectorAll('.space');\nspace.forEach((s) => s.addEventListener('click', (e) => {\n    const spaces = Array.from(space);\n    console.log(spaces.indexOf(e.target) + 1);\n}));\n"],"names":[],"sourceRoot":""}