{"version":3,"file":"main.js","mappings":";;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,mEAAmE,QAAQ;AAC3E,iEAAiE,QAAQ;AACzE;AACA;AACA;AACA,mEAAmE,QAAQ;AAC3E,iEAAiE,QAAQ;AACzE;AACA;AACA;;AAEA;AACA;AACA,oEAAoE;AACpE;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yFAAyF;AACzF,oGAAoG;AACpG,UAAU;AACV;AACA,4FAA4F;AAC5F,oGAAoG;AACpG;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;;;;;;;;;;;AClFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,oBAAoB,mBAAO,CAAC,2CAAe;AAC3C,aAAa,mBAAO,CAAC,qCAAY;AACjC,cAAc,mBAAO,CAAC,2BAAO;AAC7B,QAAQ,iBAAiB,EAAE,mBAAO,CAAC,2BAAO;;AAE1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,YAAY;AAC9C;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,gBAAgB;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,sCAAsC,gBAAgB;AACtD;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,kCAAkC,YAAY;AAC9C;AACA;AACA;AACA;;AAEA;AACA;AACA,sCAAsC,gBAAgB;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,sCAAsC,gBAAgB;AACtD;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,wBAAwB,gBAAgB;AACxC;AACA;AACA;AACA;AACA;AACA,4BAA4B,mCAAmC;AAC/D;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA,+BAA+B;AAC/B;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,kBAAkB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,sCAAsC,gBAAgB;AACtD;AACA;AACA;AACA;;AAEA;AACA,sCAAsC,gBAAgB;AACtD;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,sCAAsC,gBAAgB;AACtD;AACA;AACA;AACA;;AAEA;AACA,sCAAsC,gBAAgB;AACtD;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA,kCAAkC,YAAY;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,YAAY;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,UAAU,EAAE,UAAU;AACxD;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,8CAA8C,YAAY;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C,YAAY;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA,cAAc;AACd;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,0BAA0B,SAAS,EAAE,SAAS;AAC9C;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,oBAAoB,SAAS;AAC7B;AACA;AACA;AACA,CAAC;;AAED;;AAEA;;;;;;;;;;;ACv/BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,mBAAO,CAAC,uCAAa;AACvC,cAAc,mBAAO,CAAC,2BAAO;;AAE7B;;AAEA;AACA,IAAI,SAAS;AACb,IAAI,SAAS;AACb;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,iBAAiB,MAAM;AACvB;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;AC3GA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,mBAAO,CAAC,iCAAU;AACxC,kBAAkB,mBAAO,CAAC,uCAAa;;AAEvC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,UAAU;AACtC;AACA;AACA;AACA;AACA,2DAA2D,8BAA8B,2BAA2B,aAAa;AACjI;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,iBAAiB;AACpD;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,CAAC;;AAED;;;;;;;;;;;AChMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,wBAAwB,YAAY;AACpC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;;;;;;UC9DA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;;;;;ACtBA;AACA;AACA;AACA;AACA,aAAa,mBAAO,CAAC,qCAAY;AACjC,oBAAoB,mBAAO,CAAC,2CAAe;AAC3C,kBAAkB,mBAAO,CAAC,uCAAa;AACvC,sBAAsB,mBAAO,CAAC,iCAAU;AACxC,cAAc,mBAAO,CAAC,2BAAO","sources":["webpack://battle-ship/./src/DOM.js","webpack://battle-ship/./src/Gameboard.js","webpack://battle-ship/./src/Player.js","webpack://battle-ship/./src/gameLoop.js","webpack://battle-ship/./src/shipFactory.js","webpack://battle-ship/webpack/bootstrap","webpack://battle-ship/./src/index.js"],"sourcesContent":["/* eslint-disable default-case */\n/* eslint-disable padded-blocks */\n/* eslint-disable no-param-reassign */\n/* eslint-disable no-unused-expressions */\n/* eslint-disable no-unused-vars */\n/* eslint-disable no-case-declarations */\n/* eslint-disable no-console */\nconst printToDOM = (() => {\n    const playerContainer = document.querySelector('.player');\n    const compContainer = document.querySelector('.computer');\n\n    function appendSpaces(player) {\n        switch (true) {\n        case player === 'computer':\n            break;\n        default:\n        }\n    }\n\n    function placeShip(player) {\n    }\n    function personOrComputer(player, func) {\n        return func;\n    }\n\n    function playerGrid(grid) {\n    }\n\n    function shipCount(player, number) {\n        const root = document.querySelector(':root');\n        switch (true) {\n        case number === 1:\n            player === 'computer'\n                ? root.style.setProperty('--computer-content', `'${number} ship'`)\n                : root.style.setProperty('--player-content', `'${number} ship'`);\n            break;\n        case number !== 1:\n            player === 'computer'\n                ? root.style.setProperty('--computer-content', `'${number} ships'`)\n                : root.style.setProperty('--player-content', `'${number} ships'`);\n            break;\n        }\n    }\n\n    function playerShipColor(position, player) {\n        if (player !== 'computer') {\n            position.style.cssText = 'background-color: aquamarine; box-shadow: inset 0px 0px 1px black';\n        }\n        // #FFA826\n    }\n\n    function trackPlays(board, position, action) {\n        const parsePosition = position.toString().split(',').reverse().join('');\n        const target = parseInt(parsePosition, 10);\n        let container = '';\n        board === 'computer'\n            ? container = compContainer\n            : container = playerContainer;\n        // eslint-disable-next-line no-unused-expressions\n        if (container === playerContainer) {\n            action === 'hit'\n                ? container.children[target].style.cssText = 'background-color: #FF8D53; box-shadow: inset 0px 0px 1px black' // #FFA826\n                : container.children[target].style.cssText = 'background-color: rgb(197, 197, 197); box-shadow: inset 0px 0px 1px rgba(0, 0, 0, 0.5)';\n        } else {\n            action === 'hit'\n                ? container.children[target].style.cssText = 'background-color: aquamarine; box-shadow: inset 0px 0px 1px black' // #FFA826\n                : container.children[target].style.cssText = 'background-color: rgb(197, 197, 197); box-shadow: inset 0px 0px 1px rgba(0, 0, 0, 0.5)';\n        }\n        // indicate(position, action);\n    }\n\n    return {\n        spaces: appendSpaces,\n        verifyPlayerID: personOrComputer,\n        placeShip,\n        plays: trackPlays,\n        playerGrid,\n        playerShipColor,\n        shipCount,\n    };\n})();\n\nmodule.exports = printToDOM;\n","/* eslint-disable no-alert */\n/* eslint-disable prefer-destructuring */\n/* eslint-disable no-cond-assign */\n/* eslint-disable max-len */\n/* eslint-disable no-underscore-dangle */\n/* eslint-disable no-use-before-define */\n/* eslint-disable no-param-reassign */\n/* eslint-disable no-useless-computed-key */\n/* eslint-disable no-unused-vars */\n/* eslint-disable no-undef */\n/* eslint-disable no-return-assign */\n/* eslint-disable consistent-return */\n/* eslint-disable default-case */\n/* eslint-disable no-case-declarations */\n/* eslint-disable no-unused-expressions */\n/* eslint-disable operator-linebreak */\n/* eslint-disable no-trailing-spaces */\n/* eslint-disable no-console */\n\nconst shipFactory = require('./shipFactory');\nconst loop = require('./gameLoop');\nconst print = require('./DOM');\nconst { verifyPlayerID } = require('./DOM');\n\n// tracks each hit && miss of all players\nconst playerLog = {\n    player1: {\n        misses: [],\n        hits: [],\n        turn: true,\n        streak: false,\n    },\n    computer: {\n        misses: [],\n        hits: [],\n        available: [],\n        taken: [],\n        turn: false,\n        streak: false,\n        seek: false,\n        direction: [],\n        shipFound: [],\n        randomizedChoices: ['left', 'right', 'down', 'up'],\n    },\n};\n\n// Contains all required info about the board the game exists in\nconst board = {\n    ['player1']: { \n        name: 'Devin',\n        size: {\n            columns: 0,\n            rows: 0,\n        },\n        ships: [6],\n        grid: [\n            ['', '', '', '', '', '', '', '', '', ''],\n            ['', '', '', '', '', '', '', '', '', ''],\n            ['', '', '', '', '', '', '', '', '', ''],\n            ['', '', '', '', '', '', '', '', '', ''],\n            ['', '', '', '', '', '', '', '', '', ''],\n            ['', '', '', '', '', '', '', '', '', ''],\n            ['', '', '', '', '', '', '', '', '', ''],\n            ['', '', '', '', '', '', '', '', '', ''],\n            ['', '', '', '', '', '', '', '', '', ''],\n            ['', '', '', '', '', '', '', '', '', ''],\n        ],\n        taken: [],\n        turn: true,\n        grids: [],\n    },\n\n    ['computer']: {\n        name: 'computer',\n        size: {\n            columns: 0,\n            rows: 0,\n        },\n        ships: [6],\n        grid: [\n            ['', '', '', '', '', '', '', '', '', ''],\n            ['', '', '', '', '', '', '', '', '', ''],\n            ['', '', '', '', '', '', '', '', '', ''],\n            ['', '', '', '', '', '', '', '', '', ''],\n            ['', '', '', '', '', '', '', '', '', ''],\n            ['', '', '', '', '', '', '', '', '', ''],\n            ['', '', '', '', '', '', '', '', '', ''],\n            ['', '', '', '', '', '', '', '', '', ''],\n            ['', '', '', '', '', '', '', '', '', ''],\n            ['', '', '', '', '', '', '', '', '', ''],\n        ],\n        taken: [],\n        turn: false,\n        grids: [],\n    },\n};\nconsole.log(board.player1.grid);\n\n// Module that controls how ships are randomly placed\nconst conditionalShipPlacementModule = (() => {\n    function isCoordValid(x, y) {\n        const min = 0;\n        const max = 9;\n        \n        // tests if ship coordinates are valid or not \n        // e.g. [-1, 10] - not valid\n        // e.g. [2, 5] - valid\n        // anything lower than 0, or higher than 9 results in returning invalid\n        const validateCoords = () => {\n            if (x < 0 || y < 0) {\n                return false;\n            }\n    \n            if (x > 9 || y > 9) {\n                return false;\n            }\n    \n            if (x >= 0 && x < 10) {\n                return true;\n            }\n    \n            if (y >= 0 && y < 10) {\n                return true;\n            }\n            return true;\n        };\n        return validateCoords(x, y);\n    }\n    \n    // returns false if a ship is being placed on another ship, directly adjacent to another ship\n    // or off of the grid entirely\n    function isSpotAvailable(position, ship, axis, player) {\n        let playerBoard = '';\n        const shipSize = ship.size.length;\n        const start = position.start;\n        const end = position.end;\n        player.name === 'computer'\n            ? playerBoard = board.computer.grid\n            : playerBoard = board.player1.grid;\n        \n        if (axis === 'x') {\n            // checks if the entire ship length is available\n            for (let i = start.x; i <= end.x; i += 1) {\n                if (playerBoard[start.y][i] === 'b' || typeof playerBoard[start.y][i] === 'object') {\n                    return false;\n                }\n            }\n\n            // checks if the left side of ship is free\n            if (typeof playerBoard[start.y][start.x - 1] === 'object') {\n                return false;\n            }\n\n            // checks if the right side of ship is free\n            if (typeof playerBoard[start.y][end.x + 1] === 'object') {\n                return false;\n            }\n        \n            // checks the top side of ship\n            // if (start.y !== 0) {\n            //     console.log('IT WORKS, IT REALLY, REALLY WORKS');\n            for (let i = start.x - 1; i <= end.x + 1; i += 1) {\n                if (playerBoard[start.y - 1]) {\n                    if (typeof playerBoard[start.y - 1][i] === 'object') {\n                        return false;\n                    }\n                }\n                return true;\n            }\n            // }\n\n            // checks the bottom side of ship\n            for (let i = start.x - 1; i <= end.x + 1; i += 1) {\n                if (typeof playerBoard[start.y + 1][i] === 'object') {\n                    return false;\n                }\n            }\n            return true;    \n        } \n\n        if (axis === 'y') {\n            // checks if the entire ship length is available\n            for (let i = start.y; i <= end.y; i += 1) {\n                if (playerBoard[i][start.x] === 'b' || typeof playerBoard[i][start.x] === 'object') {\n                    return false;\n                }\n            }\n\n            // checks if left side of vertical ship is free\n            // if (start.y !== 0) {\n            for (let i = start.y - 1; i <= end.y + 1; i += 1) {\n                if (playerBoard[i]) {\n                    if (typeof playerBoard[i][start.x - 1] === 'object' || playerBoard[i][start.x - 1] === 'b') {\n                        return false;\n                    }\n                }\n                return true;\n            }\n\n            // checks if right side of vertical ship is free\n            for (let i = start.y - 1; i <= end.y + 1; i += 1) {\n                if (typeof playerBoard[start.x + 1][i] === 'object') {\n                    return false;\n                }\n            }\n\n            // checks top of vertical ship\n            if (typeof playerBoard[start.y - 1][start.x] === 'object') {\n                return false;\n            }\n\n            // checks bottom of vertical ship\n            if (typeof playerBoard[end.y + 1][start.x] === 'object') {\n                return false;\n            }\n            return true;\n        }\n        return true;\n    }\n    \n    // if both - coordinates are valid, and the desired ship placement is valid - return true and place ship\n    // else, return false, generate new coordinates and try again\n    function isShipValid(coords, newShip, newAxis, player) {\n        if (isCoordValid(coords.start.x, coords.start.y) && isSpotAvailable(coords, newShip, newAxis, player)) {\n            return true;\n        }\n        return false;\n    }\n\n    return {\n        isShipValid,\n        isCoordValid,\n\n    };\n})();\n\n/* eslint-disable no-unused-vars */\nconst gameBoard = (name) => {\n    // Creates an instance of shipFactory once here\n    const user = playerLog.player1;\n    const comp = playerLog.computer;\n\n    const checkForPlacementValidity = conditionalShipPlacementModule;\n    const computerContainer = document.querySelector('.computer');\n    const playerContainer = document.querySelector('.player');\n\n    const placeShip = conditionalShipPlacementModule;\n\n    function updateStatus(player, action) {\n        console.log(action, player);\n        action === 'miss'\n            ? playerLog[player].streak = false\n            : playerLog[player].streak = true;\n    }\n\n    // Creates the array of divs that form the board\n    function arrayCreation(cols, rows, player) {\n        const arr = new Array(cols);\n        board[player].grids.push(arr);\n        for (let i = 0; i < arr.length; i += 1) {\n            arr[i] = new Array(rows);\n        }\n        let j = 0;\n        board[player].grids[0].forEach((a) => {\n            a.splice(0, 10);\n            for (let i = 0; i < board[player].grids[0].length; i += 1) {\n                if (player === 'computer') {\n                    const compSpaces = document.createElement('div');\n                    compSpaces.classList.add('compSpace');\n                    computerContainer.appendChild(compSpaces);\n                    a.push(compSpaces);\n                } else {\n                    const playerSpaces = document.createElement('div');\n                    playerSpaces.classList.add('space');\n                    playerContainer.appendChild(playerSpaces);\n                    a.push(playerSpaces);\n                }\n            }\n            j += 1;\n        });\n        return arr;\n    }\n\n    // Allows the grid to adjust according to the number given\n    function gridSize(x, player) {\n        board[player].name = player;\n        player1.name = player;\n        board[player].size = { columns: x, rows: x };\n        gridCreate(x, player);\n        return board;\n    }\n\n    // Grabs the status of each ship on the board\n    function statusOfShips() {\n        const grids = board.player1.grid;\n        const gridContain = [];\n        grids.forEach((x) => {\n            x.status ? gridContain.push(x) : 'run';\n        });\n        return gridContain;\n    }\n\n    // tallies up each ship left afloat\n    function countShips() {\n        let currentShip = null;\n        const ships = statusOfShips();\n        const total = {\n            playerShips: null,\n            status: [],\n        };\n        const graph = ships.map((a) => a.coord);\n        const status = ships.map((a) => a.status);\n        \n        for (let i = 0; i < graph.length; i += 1) {\n            if (graph[i] !== currentShip) {\n                currentShip = graph[i];\n                total.status.push(status[i]);\n                total.playerShips += 1;\n            }\n        }\n        return total;\n    }\n\n    // if the chosen space exists within computer's availiable choices, remove that space\n    function removeComputerChoice(takenSpot) {\n        console.log(takenSpot);\n        const availableCompChoice = playerLog.computer.available;\n        const index = availableCompChoice.indexOf(takenSpot);\n        if (availableCompChoice.includes(takenSpot)) {\n            console.log(takenSpot, index, availableCompChoice[index]);\n            availableCompChoice.splice(index, 1);\n        }\n    }\n\n    // parses chosen space to then be removed from available choices\n    function logUsedComputerSpots(position) {\n        const place = position.toString().split(',').reverse().join('');\n        const takenSpot = parseInt(place, 10);\n        console.log(position, place, takenSpot, 'TEST');\n        playerLog.computer.taken.push(takenSpot);\n        removeComputerChoice(takenSpot);\n    }\n\n    // Logs activties of each player (misses / hits)\n    function trackPlays(direction, position, target, action) {\n        console.log(direction);\n        const shot = [];\n        shot.push(position[0]);\n        shot.push(position[1]);\n        switch (true) {\n        case target === 'computer':\n            action === 'hit' ? user.hits.push(shot) : user.misses.push(shot);\n            print.plays(board[target].name, position, action);\n            return action;\n        case target === 'player1':\n            action === 'hit' ? comp.hits.push(shot) : comp.misses.push(shot);\n            print.plays(board[target].name, position, action);\n            logUsedComputerSpots(position);\n            if (action === 'hit') {\n                board.player1.grid[position[1]][position[0]].status === 'afloat'\n                    ? playerLog.computer.seek = true\n                    : playerLog.computer.seek = false;\n                playerLog.computer.taken.push(position);\n                if (direction !== 'loop') {\n                    computerLogic(undefined, 'hit', direction);\n                }\n                console.log(playerLog.computer.taken);\n            }\n            if (action === 'miss') {\n                playerLog.computer.taken.push(position);\n                console.log(playerLog.computer.taken);\n                const index = playerLog.computer.direction.indexOf(direction);\n                playerLog.computer.direction.splice(index, 1);\n            }\n            return action;\n        }\n\n        return action;\n    }\n\n    // Tracks whether or not all of the ships are destroyed\n    function shipSank(ship, status, target) {\n        console.log(target);\n        status === 'sunk!'\n            ? board[target].ships -= 1\n            : board[target].ships;\n        if (target !== 'computer') {\n            playerLog.computer.seek = false;\n            playerLog.computer.randomizedChoices = ['left', 'right', 'up', 'down'];\n        }\n        return board[target].ships === 0 \n            ? print.shipCount(target, board[target].ships) \n            : print.shipCount(target, board[target].ships);\n    }\n\n    // checks that the ship that was hit is still floating -- if not, it is subtracted from total remaining ships\n    function isShipStillFloating(ship, target) {\n        target === 'computer'   \n            ? target = 'computer'\n            : target = 'player1';\n        ship.status === 'sunk!' ? \n            shipSank(ship, 'sunk!', target) : board[target].ships;\n    }\n\n    // Records which ship was hit where\n    function hit(ship, position, target, direction) {\n        const players = shipFactory();\n        const newShip = players.isHit(ship, position, target);\n        isShipStillFloating(newShip, target);\n        print.plays(target, position, 'hit');\n        return trackPlays(direction, position, target, 'hit');\n    }\n\n    // Allows the user and computer to take a shot\n    function takeAim(x, y, player, target, direction) {\n        console.log(direction);\n        let playerBoard;\n        player === 'computer'   \n            ? playerBoard = board.player1.grid\n            : playerBoard = board.computer.grid;\n        const shipObject = playerBoard[y][x];\n        const position = [x, y];\n        console.log(player);\n        playerBoard[y][x] === '' || playerBoard[y][x] === 'b'\n            ? updateStatus(player, 'miss')\n            : updateStatus(player, 'hit');\n        return playerBoard[y][x] === '' || playerBoard[y][x] === 'b'\n            ? trackPlays(direction, position, target, 'miss') \n            : hit(shipObject, position, target, direction);\n    }\n\n    // creates border around each printed ship\n    function createBorder(positions, newShip, axis, player) {\n        const coordCheck = conditionalShipPlacementModule;\n        let playerBoard;\n        player.name === 'computer'\n            ? playerBoard = board.computer.grid\n            : playerBoard = board.player1.grid;\n\n        const start = positions.start;\n        const end = positions.end;\n\n        if (axis === 'x') {\n            // Create top border\n            for (let i = start.x - 1; i <= end.x + 1; i += 1) {\n                if (coordCheck.isCoordValid(i, start.y - 1) && typeof playerBoard[start.y - 1][i] !== 'object') {\n                    playerBoard[start.y - 1].splice(i, 1, 'b');\n                } \n            }\n\n            // creates bottom border\n            for (let i = start.x - 1; i <= end.x + 1; i += 1) {\n                if (coordCheck.isCoordValid(i, start.y + 1) && typeof playerBoard[start.y + 1][i] !== 'object') {\n                    playerBoard[start.y + 1].splice(i, 1, 'b');\n                } \n            }\n\n            // creates left border\n            if (coordCheck.isCoordValid(start.x - 1, start.y) && typeof playerBoard[start.y][start.x + 1] !== 'object') {\n                playerBoard[start.y].splice(start.x - 1, 1, 'b');\n            }\n\n            // creates right border\n            if (coordCheck.isCoordValid(end.x + 1, start.y) && typeof playerBoard[start.y][end.x + 1] !== 'object') {\n                playerBoard[start.y].splice(end.x + 1, 1, 'b');\n            } \n        }\n\n        if (axis === 'y') {\n            // Create left border\n            for (let i = start.y - 1; i <= end.y + 1; i += 1) {\n                if (coordCheck.isCoordValid(start.x - 1, i) && typeof playerBoard[i][start.x - 1] !== 'object') {\n                    playerBoard[i].splice(start.x - 1, 1, 'b');\n                } \n            }\n\n            // Create right border\n            for (let i = start.y - 1; i <= end.y + 1; i += 1) {\n                if (coordCheck.isCoordValid(start.x + 1, i) && typeof playerBoard[i][start.x + 1] !== 'object') {\n                    playerBoard[i].splice(start.x + 1, 1, 'b');\n                } \n            }\n\n            // creates top border\n            if (coordCheck.isCoordValid(start.x, start.y - 1) && typeof playerBoard[start.y - 1][start.x] !== 'object') {\n                playerBoard[start.y - 1].splice(start.x, 1, 'b');\n            }\n\n            // creates bottom border\n            if (coordCheck.isCoordValid(end.x, end.y + 1) && typeof playerBoard[end.y + 1][start.x] !== 'object') {\n                playerBoard[end.y + 1].splice(start.x, 1, 'b');\n            } \n        }\n    }\n\n    // determines which board ships are printed to\n    function determinePlayer(player, grid) {\n        switch (true) {\n        case grid === 0:\n            return player === 'computer'\n                ? board.computer.grids[0]\n                : board.player1.grids[0];\n        case grid === 1:\n            return player === 'computer'\n                ? board.computer.grid\n                : board.player1.grid;\n        }\n    }\n\n    // Randomizes ship placement\n    function createPlayerShips(positions, newShip, axis, player) {\n        const playerBoard = determinePlayer(player.name, 0);\n        const secondaryPlayerBoard = determinePlayer(player.name, 1);\n        let start = positions.start;\n        let end = positions.end;\n        const length = newShip.size.length;\n        let coords;\n        const cap = 10 - length;\n        let newAxis;\n        \n        // eslint-disable-next-line prefer-const\n        do {\n            newAxis = randomAxisGeneration(newShip, player);\n            coords = simpleNumberGeneration(cap, newAxis, length);\n            start = coords.start;\n            end = coords.end;\n            newShip.coord = coords;\n            axis = newAxis;\n        } while (checkForPlacementValidity.isShipValid(coords, newShip, newAxis, player) === false);\n        \n        switch (true) {\n        case axis === 'x':\n            for (let i = start.x; i <= end.x; i += 1) {\n                secondaryPlayerBoard[start.y].splice(i, 1, newShip);\n                print.playerShipColor(playerBoard[start.y][i], player.name);\n                createBorder(coords, newShip, 'x', player);\n            }\n            break;\n        case axis === 'y':\n            for (let i = start.y; i <= end.y; i += 1) {\n                secondaryPlayerBoard[i].splice(start.x, 1, newShip);\n                print.playerShipColor(playerBoard[i][start.x], player.name);\n                createBorder(coords, newShip, 'y', player);\n            }\n            break;\n        }\n    }\n\n    // Creates a ship and places it on the board\n    function createShip(position, axis, player, i, length) {\n        let playerBoard = '';\n        let newShip = '';\n        const shipFactoryFunction = shipFactory();\n        player.name === 'computer' ? playerBoard = board.computer : playerBoard = board.player1;\n        // const gridPlace = convertCoordToSpace(position, player.name);\n        newShip = shipFactoryFunction.createShip(length);\n        newShip.coord = position;\n        createPlayerShips(position, newShip, axis, player);\n    }\n\n    function prepareShipForCreation(length, position, axis, player, k) {\n        let playerBoard = '';\n        player.name === 'computer' ? playerBoard = board.computer : playerBoard = board.player1;\n        createShip(position, axis, player, k, length);\n    }  \n\n    // playerBoard, axis, i\n    function simpleNumberGeneration(cap, axis, i) {\n        let x = 0;\n        let y = 0;\n        const coord = {\n            start: {\n                x,\n                y, \n            },\n            end: {\n                x,\n                y,\n            },\n        };\n        if (axis === 'y') {\n            i === 1\n                ? i -= 1\n                : i -= 1;\n            x = Math.floor(Math.random() * 9);\n            y = Math.floor(Math.random() * (10 - i));\n            coord.start.x = x;\n            coord.start.y = y;\n            coord.end.x = x;\n            coord.end.y = coord.start.y + i;\n        } else if (axis === 'x') {\n            i === 1\n                ? i -= 1\n                : i -= 1;\n            x = Math.floor(Math.random() * (10 - i));\n            y = Math.floor(Math.random() * 9);\n            coord.start.x = x;\n            coord.start.y = y;\n            coord.end.x = coord.start.x + i;\n            coord.end.y = y;\n        }\n        return coord;\n    }\n\n    // Generates a random coord\n    function randomNumberGeneration(axis, i, player) {\n        let playerBoard = '';\n        player === 'computer' ? playerBoard = board.computer : playerBoard = board.player1;\n        const limit = 10 - i;\n        const shipStartingPoint = axis === 'x' \n            ? simpleNumberGeneration(limit, axis, i)\n            : simpleNumberGeneration(limit, axis, i);\n        \n        return shipStartingPoint;\n    }\n           \n    function randomAxisGeneration(ship, player) {\n        let axis = Math.floor(Math.random() * 2);\n        axis === 0 \n            ? axis = 'x' \n            : axis = 'y';\n        return axis;\n    }\n\n    // Crutial step that gathers needed info for proper placement of ships\n    function gatherShipMaterials(shipLength, player, axis, i) {\n        prepareShipForCreation(shipLength, randomNumberGeneration(axis, shipLength, player), axis, player, i);\n    }\n\n    // Functionality for randomizing and placing computer ships\n    function randomizedShips(player) {\n        // eslint-disable-next-line no-unused-expressions\n    \n        player === 'computer' ? player = computer : player = player1;\n        let i = 0;\n        player.shipsLength.forEach((length) => {\n            gatherShipMaterials(length, player, randomAxisGeneration(length, player), i);\n            i += 1;\n        });\n        const colorMyGrid = board.player1.taken;\n        // print.playerShipColor(colorMyGrid);\n    }\n\n    function moveLeft(base, newCoords, newArray) {\n        newCoords = checkForPlacementValidity.isCoordValid(base[0] - 1, base[1]);\n        const newTarget = [base[0] - 1, base[1]];\n        console.log(playerLog.computer.available.includes(newTarget));\n        console.log(playerLog.computer.taken.includes(newTarget), 'taken');\n        if (newCoords === true) {\n            const x = base[0] - 1;\n            const y = base[1];\n\n            newArray.push(x);\n            newArray.push(y);\n            setTimeout(parseCoordinates(newArray, 'computer', 'player1', 'left'), 400);\n            const rememberDirection = playerLog.computer.direction;\n            rememberDirection.push('left');\n        } else if (newCoords === false) {\n            computerLogic('left');\n        }\n    }    \n\n    function moveRight(base, newCoords, newArray) {\n        newCoords = checkForPlacementValidity.isCoordValid(base[0] + 1, base[1]);\n        const newTarget = [base[0] + 1, base[1]];\n        console.log(playerLog.computer.available.includes(newTarget));\n        console.log(playerLog.computer.taken.includes(newTarget), 'taken');\n        if (newCoords === true) {\n            const x = base[0] + 1;\n            const y = base[1];\n\n            newArray.push(x);\n            newArray.push(y);\n            setTimeout(parseCoordinates(newArray, 'computer', 'player1', 'right'), 400);\n            const rememberDirection = playerLog.computer.direction;\n            rememberDirection.push('right');\n        } else if (newCoords === false) {\n            computerLogic('right');\n        }\n    }\n\n    function moveUp(base, newCoords, newArray) {\n        newCoords = checkForPlacementValidity.isCoordValid(base[0], base[1] - 1);\n        const newTarget = [base[0], base[1] - 1];\n        console.log(playerLog.computer.available.includes(newTarget));\n        console.log(playerLog.computer.taken.includes(newTarget), 'taken');\n        if (newCoords === true) {\n            const x = base[0];\n            const y = base[1] - 1;\n\n            newArray.push(x);\n            newArray.push(y);\n            setTimeout(parseCoordinates(newArray, 'computer', 'player1', 'up'), 400);\n            const rememberDirection = playerLog.computer.direction;\n            rememberDirection.push('up');\n        } else if (newCoords === false) {\n            computerLogic('up');\n        }\n    }\n\n    function moveDown(base, newCoords, newArray) {\n        const newTarget = [base[0], base[1] + 1];\n        newCoords = checkForPlacementValidity.isCoordValid(base[1], base[0] + 1);\n        console.log(playerLog.computer.available.includes(newTarget));\n        console.log(playerLog.computer.taken.includes(newTarget), 'taken');\n        if (newCoords === true) {\n            const x = base[0];\n            const y = base[1] + 1;\n            \n            newArray.push(x);\n            newArray.push(y);\n            console.log(newArray);\n            setTimeout(parseCoordinates(newArray, 'computer', 'player1', 'down'), 400);\n            const rememberDirection = playerLog.computer.direction;\n            rememberDirection.push('down');\n        } else if (newCoords === false) {\n            computerLogic('down');\n        }\n    }\n\n    function routeDirection(base, newCoords, newArray, direction) {\n        switch (true) {\n        case direction === 'up':\n            moveUp(base, newCoords, newArray);\n            break;\n        case direction === 'down':\n            moveDown(base, newCoords, newArray);\n            break;\n        case direction === 'left':\n            moveLeft(base, newCoords, newArray);\n            break;\n        case direction === 'right':\n            moveRight(base, newCoords, newArray);\n            break;\n        }\n    }\n    \n    function haveIGoneHereBefore(coords) {\n        const coordsToString = `${coords[0]}${coords[1]}`;\n        const stringToNumber = parseInt(coordsToString);\n        return playerLog.computer.available.includes(stringToNumber)\n            ? true\n            : false;\n    }\n\n    function shipHasBeenFound(direction, action) {\n        const base = playerLog.computer.hits[playerLog.computer.hits.length - 1];\n        const foundShip = board.player1.grid.base;\n        const targetSpace = board.player1.grid[base[1]][base[0]];\n        console.log(targetSpace.size);\n        const unhitSpaces = targetSpace.size.filter((a) => a === 'safe');\n        console.log(unhitSpaces);\n        let newCoords;\n        const newArray = [];\n        const space = board.player1.grid;\n        let choice;\n        const left = [base[0] - 1, base[1]];\n        const right = [base[0] + 1, base[1]];\n        const down = [base[0], base[1] + 1];\n        const up = [base[0], base[1] - 1];\n        const randomizedChoices = [left, right, down, up];\n        console.log(targetSpace);\n        let lastShip;\n        let secondToLastShip;\n        \n        // map out the size array in the ship\n        // run an indexOf on all 'safe' locations\n        // access the coordinates, and then hit all remaining \n        console.log(direction, direction, direction, direction);\n        if (direction === undefined) {\n            let count = 0;\n            do {\n                choice = randomizedChoices[Math.floor(Math.random() * randomizedChoices.length)];\n\n                if (playerLog.computer.taken.includes(fromArrayToNumber(choice))) {\n                    lastShip = playerLog.computer.hits[playerLog.computer.hits.length - 1];\n                    secondToLastShip = playerLog.computer.hits[playerLog.computer.hits.length - 2];\n                    const newLastShip = board.player1.grid[lastShip[1]][lastShip[0]];\n                    const start = newLastShip.coord.start;\n                    const end = newLastShip.coord.end;\n\n                    switch (true) {\n                    case start.x === end.x:\n                        for (let i = start.y; i <= end.y; i += 1) {\n                            const tempArray = [start.x, i];\n                            if (!playerLog.computer.taken.includes(fromArrayToNumber(tempArray))) {\n                                choice = tempArray;\n                                parseCoordinates(tempArray, 'computer', 'player1', 'loop');\n                            }\n                        }\n                        break;\n                    case start.y === end.y:\n                        for (let i = start.x; i <= end.x; i += 1) {\n                            const tempArray = [i, start.y];\n                            if (!playerLog.computer.taken.includes(fromArrayToNumber(tempArray))) {\n                                choice = tempArray;\n                                parseCoordinates(tempArray, 'computer', 'player1', 'loop');\n                            }\n                        }\n                        break;\n                    }\n                } else {\n                    choice = randomizedChoices[Math.floor(Math.random() * randomizedChoices.length)];\n                }\n                count += 1;\n            } while (haveIGoneHereBefore(choice) === true && checkForPlacementValidity.isCoordValid(choice) === false && count === 14);\n        } \n\n        switch (true) {\n        case choice === undefined:\n            break;\n        case choice === left && playerLog.computer.taken.includes(fromArrayToNumber(choice)) === false:\n            if (board.player1.grid[base[0] - 1][base[1]] === undefined) {\n                routeDirection(base, newCoords, newArray, 'right');\n                if (typeof board.player1.grid[base[0] + 1][base[1]] !== 'object') {\n                    playerLog.computer.randomizedChoices.splice('right', 1);\n                }\n            } else {\n                routeDirection(base, newCoords, newArray, 'left');\n                if (typeof board.player1.grid[base[0] - 1][base[1]] !== 'object') {\n                    playerLog.computer.randomizedChoices.splice('left', 1);\n                }\n            }\n\n            break;\n        \n        case choice === up && playerLog.computer.taken.includes(fromArrayToNumber(choice)) === false:\n            if (board.player1.grid[base[0]][base[1] - 1] === undefined) {\n                routeDirection(base, newCoords, newArray, 'down');\n                if (typeof board.player1.grid[base[0]][base[1] + 1] !== 'object') {\n                    playerLog.computer.randomizedChoices.splice('down', 1);\n                }\n            } else {\n                routeDirection(base, newCoords, newArray, 'up');\n                if (typeof board.player1.grid[base[0]][base[1] - 1] !== 'object') {\n                    playerLog.computer.randomizedChoices.splice('up', 1);\n                }\n            }\n\n            break;\n\n        case choice === right && playerLog.computer.taken.includes(fromArrayToNumber(choice)) === false:\n            if (board.player1.grid[base[0] + 1][base[1]] === undefined) {\n                routeDirection(base, newCoords, newArray, 'left');\n                if (typeof board.player1.grid[base[0] - 1][base[1]] !== 'object') {\n                    playerLog.computer.randomizedChoices.splice('left', 1);\n                }\n            } else {\n                routeDirection(base, newCoords, newArray, 'right');\n                if (typeof board.player1.grid[base[0] + 1][base[1]] !== 'object') {\n                    playerLog.computer.randomizedChoices.splice('right', 1);\n                }\n            }  \n        \n            break;\n\n        case choice === down && playerLog.computer.taken.includes(fromArrayToNumber(choice)) === false:\n            if (board.player1.grid[base[0]][base[1] + 1] === undefined) {\n                routeDirection(base, newCoords, newArray, 'up');\n                if (typeof board.player1.grid[base[0]][base[1] - 1] !== 'object') {\n                    playerLog.computer.randomizedChoices.splice('up', 1);\n                }\n            } else {\n                routeDirection(base, newCoords, newArray, 'down');\n                if (typeof board.player1.grid[base[0]][base[1] + 1] !== 'object') {\n                    playerLog.computer.randomizedChoices.splice('down', 1);\n                }\n            }\n            break;\n        }\n    }\n   \n    function computerLogic(direction, action) {\n        console.log(direction);\n        if (direction === undefined) {\n            const base = playerLog.computer.hits[playerLog.computer.hits.length - 1];\n            console.log(base);\n            const foundShip = board.player1.grid[base[1]][base[0]];\n            console.log(foundShip);\n            if (foundShip.status === 'afloat') {\n                console.log('above ship logic');\n                playerLog.computer.shipFound.push(foundShip);\n                shipHasBeenFound(direction, action);\n            } else if (foundShip.status === 'sunk!') {\n                console.log('generate random shot');\n                hitOrMiss('computer');\n            }\n        } else {\n            console.log(direction);\n            shipHasBeenFound(direction, action);\n        }\n        \n        // if (typeof targetSpace === 'object' && targetSpace.status === 'sunk!') {\n        //     playerLog.computer.shipFound.push(targetSpace);\n        //     console.log(targetSpace.status === 'sunk!');\n        // }\n    }\n\n    function fromArrayToNumber(array) {\n        console.log(array);\n        const newNum = `${array[1]}${array[0]}`;\n        const finalProduct = parseInt(newNum, 10);\n        console.log(finalProduct);\n        return finalProduct;\n    }\n\n    function parseIndex(index) {\n        let newCoord = [];\n        switch (true) {\n        case index === 0:\n            return newCoord = [0, 0];\n        case index < 10:\n            return newCoord = [index, 0];\n        default:\n            const coord = index.toString().split('').reverse().join('');\n            const x = coord.substring(0, 1);\n            const y = coord.substring(1, 2);\n            newCoord.push(parseInt(x, 10));\n            newCoord.push(parseInt(y, 10));\n            return newCoord;\n        }\n    }\n\n    function computerNumberGeneration() {\n        const freeSpaces = playerLog.computer.available;\n        const coord = freeSpaces[Math.floor(Math.random() * freeSpaces.length)];\n        const newCoord = parseIndex(coord);\n        console.log(newCoord);\n        console.log(playerLog.computer.available);\n        return newCoord;\n    }\n\n    function computerSimulatedClick(player, target) {\n        const taken = playerLog.computer.taken;\n        const coord = computerNumberGeneration();\n        \n        if (playerLog.computer.streak === false) {\n            parseCoordinates(coord, player, target);\n        } else {\n            parseCoordinates(coord, player, target);\n        }\n    }\n\n    function hitOrMiss(player, coord) {\n        let target;\n        player === 'computer'\n            ? target = 'player1'\n            : target = 'computer';\n        if (player === 'computer') {\n            const wasShipFound = playerLog.computer.seek;\n            \n            // Determines who the player is, and if it is the computer and the computer is \n            // actively seeking a ship, it will forgo randomizing a position, and instead \n            // continue seeking out the ship until it is sunk\n            console.log(wasShipFound);\n            switch (true) {\n            case wasShipFound:\n                computerLogic();\n                break;\n            case wasShipFound === false:\n                computerSimulatedClick(player, target);\n                break;\n            }\n        } else if (player !== 'computer') {\n            parseCoordinates(coord, player, target);\n        }\n    }\n\n    // takes the index of the chosen space and parses it into usable coordinates\n    function parseCoordinates(coord, player, target, direction) {\n        console.log(coord);\n        takeAim(coord[0], coord[1], player, target, direction);\n    }\n\n    function shareStreak(currentPlayer) {        \n        return playerLog[currentPlayer].streak;\n    }\n\n    return {\n        gridSize, \n        hit, \n        takeAim, \n        statusOfShips, \n        countShips, \n        isShipStillFloating,\n        prepareShipForCreation,\n        randomizedShips,\n        gatherShipMaterials,\n        arrayCreation,\n        hitOrMiss,\n        shareStreak,\n    };\n};\n\n// Both of the below objects 'computer' && 'player1' contain each ship to be used\nconst computer = {\n    name: 'computer',\n    shipsLength: [4, 3, 2, 2, 1, 1],\n};\n\nconst player1 = {\n    name: 'Devin',\n    shipsLength: [4, 3, 2, 2, 1, 1],\n};\n\nwindow.addEventListener('load', () => {\n    const freeComputerSpaces = playerLog.computer.available;\n    for (let i = 0; i < 100; i += 1) {\n        freeComputerSpaces.push(i);\n    }\n    console.log(freeComputerSpaces);\n});\n\n// when computer hits a ship, rework the logic so that it cannot go negative in the choices made \n\nmodule.exports = gameBoard;\n","/* eslint-disable no-alert */\n/* eslint-disable no-unused-expressions */\n/* eslint-disable no-use-before-define */\n/* eslint-disable no-shadow */\n/* eslint-disable no-case-declarations */\n/* eslint-disable no-return-assign */\n/* eslint-disable no-console */\n/* eslint-disable operator-linebreak */\n/* eslint-disable no-unused-vars */\nconst gameBoard = require('./Gameboard');\nconst print = require('./DOM');\n\nconst gB = gameBoard();\n\nconst Player = (name, turn) => {\n    this.name = name;\n    this.turn = turn;\n    const shot = [];\n\n    const time = [1400, 1500, 1600, 1350, 1700];\n\n    const computerGrid = document.querySelector('.computer').childNodes;\n    const spaces = Array.from(computerGrid);\n    const randomize = document.querySelector('.randomize');\n    const players = document.querySelector('.player');\n    const computers = document.querySelector('.computer');\n\n    function checkStreak(name) {\n        return name === 'computer'\n            ? gB.shareStreak('computer')\n            : gB.shareStreak('player1');\n    }\n\n    function randomizeShips(name) {\n        gB.randomizedShips(name);\n    }\n\n    function notYourTurn() {\n        alert(`${name} it is not your turn`);\n        console.log(name);\n    }\n\n    function turnOrder(index, turn) {\n        computers.classList.toggle('activePlayer');\n        players.classList.toggle('activePlayer');\n        aim(name, index);\n    }\n\n    function parseIndex(index) {\n        let newCoord = [];\n        switch (true) {\n        case index === 0:\n            return newCoord = [0, 0];\n        case index < 10:\n            return newCoord = [index, 0];\n        default:\n            const coord = index.toString().split('').reverse().join('');\n            const x = coord.substring(0, 1);\n            const y = coord.substring(1, 2);\n            newCoord.push(parseInt(x, 10));\n            newCoord.push(parseInt(y, 10));\n            return newCoord;\n        }\n    }\n\n    function shoot(index) {\n        let coord;\n        if (index !== undefined) {\n            shot.push(index);\n            coord = parseIndex(index);\n        }\n        name === 'computer'\n            ? gB.hitOrMiss(name)\n            : gB.hitOrMiss('player1', coord);\n    }\n\n    // eslint-disable-next-line consistent-return\n    function aim(name, index) {\n        if (name === 'computer') {\n            shoot(index);\n        } else if (name !== 'computer') {\n            shot.includes(index)\n                ? 'You already shot this spot'\n                : shoot(index);\n        }\n    }\n\n    function activateComputerGrid() {\n        spaces.forEach((x) => x.addEventListener('click', (e) => {\n            aim(spaces.indexOf(e.target) + 1);\n        }));\n    }\n\n    function shipAction(names, funct) {\n        print.verifyPlayerID(names, funct);\n    }\n\n    return {\n        checkStreak,\n        randomizeShips,\n        aim,\n        turnOrder,\n        shipAction,\n        activateComputerGrid,\n    };\n};\n\nmodule.exports = Player;\n","/* eslint-disable no-alert */\n/* eslint-disable default-case */\n/* eslint-disable no-unused-expressions */\n/* eslint-disable no-param-reassign */\n/* eslint-disable no-console */\n/* eslint-disable no-unused-vars */\n/* eslint-disable no-return-assign */\n/* eslint-disable operator-linebreak */\n/* eslint-disable no-const-assign */\nconst playerFactory = require('./Player');\nconst gameBoard = require('./Gameboard');\n\nconst gB = gameBoard();\n// Player1 Ships\nconst player1 = playerFactory('Devin', true);\nconst computer = playerFactory('computer', true);\nconst players = document.querySelector('.player');\nconst computers = document.querySelector('.computer');\n\nconst GameLoop = (() => {\n    const user = {\n        name: null,\n        turn: true,\n    };\n\n    // Array used to randomize the computer's turn length\n    const time = [450, 550, 650, 500, 600, 235];\n\n    // conditionals to handle drag ships button\n    const dragButton = document.querySelector('.drag');\n    const dragShipPanel = document.createElement('div');\n    let dragConditional = true;\n\n    // allows both computer and user to randomize their ships\n    function prepareShips(player) {\n        switch (true) {\n        case player === 'computer':\n            computer.randomizeShips('computer');\n            break;\n        case player !== 'computer':\n            player1.name = player;\n            player1.randomizeShips(player);\n            break;\n        }\n    }\n\n    // function that gets players turn, and upon taking the shoot action, switches it\n    function alternateTurn(index) {\n        player1.turnOrder(index, user.turn);\n    }\n\n    // Function that allows the computer to shoot\n    function computerTurn() {\n        computers.classList.toggle('activePlayer');\n        players.classList.toggle('activePlayer');\n        computer.aim('computer');\n    }\n\n    function createDragPanelHeader() {\n        const headerContainer = document.querySelector('.shipContainer');\n        const header = document.createElement('div');\n        header.classList.add('shipContainerHeader');\n        header.textContent = 'Drag Your Ships';\n        headerContainer.appendChild(header);\n    }\n\n    function removeDragPanelHeader() {\n        const headerContainer = document.querySelector('.shipContainer');\n        const header = document.querySelector('.shipContainerHeader');\n        headerContainer.removeChild(header);\n    }\n\n    function removeDragPanelShipHold() {\n        const headerContainer = document.querySelector('.shipContainer');\n        const shipHold = document.querySelector('.shipContainerShipHold');\n        headerContainer.removeChild(shipHold);\n    }\n\n    function createDraggableShips(array) {\n        const draggableShipContainer = document.querySelector('.shipContainerShipHold');\n        array.forEach((ship) => {\n            const shipSpaceContainer = document.createElement('div');\n            shipSpaceContainer.classList.add('shipSpaceContainer');\n            draggableShipContainer.appendChild(shipSpaceContainer);\n            for (let i = 0; i < ship; i += 1) {\n                const ships = document.createElement('div');\n                ships.classList.add('space');\n                ships.classList.add('draggable');\n                shipSpaceContainer.setAttribute('draggable', true);\n                ships.style.cssText = 'grid-area: \"ships\"; background-color: aquamarine; border: .25px solid black; cursor: move;';\n                shipSpaceContainer.appendChild(ships);\n            }\n        });\n    }\n\n    function removeDraggableShips() {\n        const shipContainer = document.querySelector('.shipContainerShipHold');\n        const ship = document.querySelectorAll('.shipSpaceContainer');\n        ship.forEach((a) => {\n            shipContainer.removeChild(a);\n        });\n    }\n\n    function createDragPanelShipHold() {\n        const shipArray = [4, 3, 2, 2, 1, 1];\n        const headerContainer = document.querySelector('.shipContainer');\n        const shipHold = document.createElement('div');\n        shipHold.classList.add('shipContainerShipHold');\n        headerContainer.appendChild(shipHold);\n        createDraggableShips(shipArray);\n    }\n    // function that handles the creation of the ship dragging panel\n    function dragPanel() {\n        const gameContainerDiv = document.querySelector('.gameContainer');\n        dragShipPanel.classList.toggle('computer');\n        dragShipPanel.classList.add('shipContainer');\n        gameContainerDiv.appendChild(dragShipPanel);\n        createDragPanelHeader();\n        createDragPanelShipHold();\n        dragConditional = false;\n    }\n\n    // function that handles the deletion of the ship dragging panel\n    function dragPanelClose() {\n        const gameContainerDiv = document.querySelector('.gameContainer');\n        removeDragPanelHeader();\n        removeDraggableShips();\n        removeDragPanelShipHold();\n        gameContainerDiv.removeChild(dragShipPanel);\n        dragShipPanel.classList.toggle('computer');\n        dragShipPanel.classList.remove('shipContainer');\n        dragConditional = true;\n    }\n\n    // FUnction allowing each grid space to be clicked\n    function allowGamePlay() {\n        computers.classList.toggle('activePlayer');\n        const computerGrid = document.querySelector('.computer').childNodes;\n        const spaces = Array.from(computerGrid);\n\n        // event listeners for the board that is the target of the user\n        spaces.forEach((space) => space.addEventListener('click', (e) => {\n            const n = spaces.indexOf(space);\n            const randomLengthOfTime = Math.floor(Math.random() * time.length);\n            alternateTurn(n);\n            if (player1.checkStreak('player1') === false) {\n                setTimeout(() => { computerTurn(); }, 600);\n            }\n            // reimplement a system that ONLY allows users turn if the computer's streak is false\n        }));\n    }\n\n    // Listens for the drag ships button to be clicked\n    dragButton.addEventListener('click', () => {\n        dragConditional === true\n            ? dragPanel()\n            : dragPanelClose();\n    });\n\n    // eventListener for randomized play\n    const randomizeButton = document.querySelector('.randomize');\n    // event listener for the different playstyle buttons'\n    // randomize option\n\n    randomizeButton.addEventListener('mousedown', () => {\n        prepareShips('player1');\n        prepareShips('computer');\n        allowGamePlay();\n    });\n\n    randomizeButton.removeEventListener('mouseup', () => {\n        randomizeButton.removeEventListener('mousedown', () => false);\n    });\n\n    return {\n        prepareShips,\n        alternateTurn,\n    };\n})();\n\n// Player1\nconst playerOne = gameBoard();\n\n// Computer Ships\nconst computerPlayer = gameBoard();\n\n// Creates grid on page load\nwindow.addEventListener('load', () => {\n    computerPlayer.arrayCreation(10, 10, 'computer');\n    playerOne.arrayCreation(10, 10, 'player1');\n});\n\nmodule.exports = GameLoop;\n","/* eslint-disable prefer-destructuring */\n/* eslint-disable default-case */\n/* eslint-disable no-case-declarations */\n/* eslint-disable no-unused-vars */\n/* eslint-disable no-param-reassign */\n/* eslint-disable no-unused-expressions */\n/* eslint-disable operator-linebreak */\n/* eslint-disable no-console */\n\n// should be a way to track which part of ship was hit, WITHOUT knowing about\n// the gameboard functionality\n\n// Creates each ship object\nconst shipFactory = () => {\n    const shipSegments = {\n        status: 'afloat',\n        size: [],\n    };\n\n    // creates the ship, and calls giveCoord() for coordinates\n    const createShip = (length) => {\n        for (let i = 0; i < length; i += 1) {\n            shipSegments.size.push('safe');\n        }\n        return shipSegments;\n    };\n\n    // function that is called once all ship positions are hit\n    function isSunk(ship) {\n        const shipSunk = ship.size.every((x) => x === 'hit');\n        const shipStatus = shipSunk ? ship.status = 'sunk!' : false;\n        return shipStatus;\n    }\n\n    // function for recording each hit on ships\n    const isHit = (ship, position, target) => {\n        const start = ship.coord.start;\n        const end = ship.coord.end;\n\n        switch (true) {\n        case ship.size.length === 1:\n            ship.size.splice(0, 1, 'hit');\n            break;\n        case start.y === end.y:\n            const index = position[0] - start.x;\n            ship.size.splice(index, 1, 'hit');\n            break;\n        case start.x === end.x:\n            const indexY = position[1] - start.y;\n            ship.size.splice(indexY, 1, 'hit');\n            break;\n        }\n\n        isSunk(ship);\n        return ship;\n    };\n\n    return {\n        createShip, isHit, isSunk,\n    };\n};\n\nmodule.exports = shipFactory;\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","/* eslint-disable default-case */\n/* eslint-disable no-use-before-define */\n/* eslint-disable no-console */\n/* eslint-disable no-unused-vars */\nconst loop = require('./gameLoop');\nconst ShipFactory = require('./shipFactory');\nconst Gameboard = require('./Gameboard');\nconst playerFactory = require('./Player');\nconst print = require('./DOM');\n"],"names":[],"sourceRoot":""}